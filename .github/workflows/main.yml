name: Unity Actions

on:
  push: { branches: [main, playtest] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: ./game-builtin-renderer

jobs:
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        # https://github.com/game-ci/unity-request-activation-file/releases/
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - name: Expose as artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  test:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Test all modes âœ¨
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v2.1.7
        with:
          path: Library
          key: Library-test-project-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-test-project-
            Library-
      # https://github.com/game-ci/unity-test-runner/releases/
      - uses: game-ci/unity-test-runner@v2.0.0-alpha-7
        id: testRunner
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: all
          customParameters: "-nographics"
      - uses: actions/upload-artifact@v2
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  build:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - WebGL 
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - uses: actions/cache@v2.1.7
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-
            Library-
      # https://github.com/game-ci/unity-builder/releases/
      - uses: game-ci/unity-builder@v2.0-alpha-13
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v2
        with:
          name: build_${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          
  updateArtifactURLs: 
    needs: [build]
    name: Update artifact URLs in ci submodule
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout repository
        uses: actions/checkout@v2
        with: 
          lfs: true
          submodules: recursive
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: 12.x
      - name: Fetch and store artifact links
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          cd ./ggj-2022-ci-page
          
          git pull origin/master
          
          npm install
          
          echo "Attempting to fetch links"
          
          node link-fetch${{ secrets.API_GH_KEY }} ${{ github.run_id }}
          
          git add . 
          git commit -m "updated artifact links to match run ${{ github.run_id }}"
          git push
          
    
  deployToGitHubPages:
    needs: [build]
    name: Deploy playtest build to GitHub Pages branch
    runs-on: ubuntu-latest
    steps: 
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
          lfs: true
          ref: gh-pages # branch to checkout
      - name: Download WebGL Build Artifact
        uses: actions/download-artifact@v2
        with:
          name: build_WebGL
          path: build/WebGL
      - name: Get Version
        id: versioning
        uses: paulhatch/semantic-version@v4.0.2
        with:
          format: "${major}.${minor}.${patch}"
      - name: Copy build to github pages branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          pwd
          ls -R
          
          echo "Clearing docs folder"
          
          cd docs
          rm -rf * 
          
          echo "Copying build artifact to gh-pages directory"

          cd ..
          cp -a build/WebGL/WebGL/. docs/.
          rm -rf build
          
          ls -R
          
          git add .
          git commit -m "Deploy ${{env.PROJECT_PATH}} v${{steps.versioning.outputs.version}}"
          git push  
